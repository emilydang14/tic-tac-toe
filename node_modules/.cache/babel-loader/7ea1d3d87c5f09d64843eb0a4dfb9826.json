{"ast":null,"code":"var _jsxFileName = \"/Users/emilydang/Desktop/tic-tac-toe/src/GameBoard/GameBoard.jsx\";\nimport React, { useState } from \"react\";\nimport Square from \"./squares/Square\";\nimport classes from \"./GameBoard.module.css\";\nimport Button from \"../Button/Button\";\n\nconst GameBoard = () => {\n  const [boardValues, setBoardValues] = useState([Array(9).fill(null)]);\n  const [xIsNext, setXisNext] = useState(false);\n\n  const clickSquareHandler = index => {\n    setXisNext(!xIsNext); //determine X or O\n\n    const newBoardValues = [...boardValues]; //avoiding mutate the state directly\n\n    xIsNext ? newBoardValues[index] = \"X\" : newBoardValues[index] = \"O\";\n    setBoardValues(newBoardValues);\n  }; //each square is different, render with different index\n\n\n  const renderSquare = index => {\n    return /*#__PURE__*/React.createElement(Square, {\n      squareValue: boardValues[index],\n      clickSquare: () => clickSquareHandler(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    });\n  }; //set board back to empty\n\n\n  const restartGameHandler = () => {\n    setBoardValues([Array(9).fill(null)]);\n  }; //calculate the winner\n\n\n  const checkWinner = squares => {\n    const winningLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [2, 5, 8], [2, 4, 6]];\n\n    for (let i = 0; i < winningLines.length; i++) {\n      const [a, b, c] = winningLines[i];\n\n      if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n        return squares[a];\n      }\n    }\n\n    return null;\n  };\n\n  let GameStatus;\n  const winner = checkWinner(boardValues);\n  GameStatus = winner ? `The winner is ${winner}` : `Next is : ${xIsNext ? \"X\" : \"O\"}`;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.GameContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    clickButton: restartGameHandler,\n    buttonName: \"Start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \" \", GameStatus, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.GameBoard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, renderSquare(0), renderSquare(1), renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, renderSquare(3), renderSquare(4), renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, renderSquare(6), renderSquare(7), renderSquare(8))));\n};\n\nexport default GameBoard;","map":{"version":3,"sources":["/Users/emilydang/Desktop/tic-tac-toe/src/GameBoard/GameBoard.jsx"],"names":["React","useState","Square","classes","Button","GameBoard","boardValues","setBoardValues","Array","fill","xIsNext","setXisNext","clickSquareHandler","index","newBoardValues","renderSquare","restartGameHandler","checkWinner","squares","winningLines","i","length","a","b","c","GameStatus","winner","GameContainer","text","row"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Square from \"./squares/Square\";\nimport classes from \"./GameBoard.module.css\";\nimport Button from \"../Button/Button\";\n\nconst GameBoard = () => {\n  const [boardValues, setBoardValues] = useState([Array(9).fill(null)]);\n  const [xIsNext, setXisNext] = useState(false);\n\n  const clickSquareHandler = (index) => {\n    setXisNext(!xIsNext); //determine X or O\n    const newBoardValues = [...boardValues]; //avoiding mutate the state directly\n    xIsNext ? (newBoardValues[index] = \"X\") : (newBoardValues[index] = \"O\");\n    setBoardValues(newBoardValues);\n  };\n\n  //each square is different, render with different index\n  const renderSquare = (index) => {\n    return (\n      <Square\n        squareValue={boardValues[index]}\n        clickSquare={() => clickSquareHandler(index)}\n      />\n    );\n  };\n  //set board back to empty\n  const restartGameHandler = () => {\n    setBoardValues([Array(9).fill(null)]);\n  };\n\n  //calculate the winner\n\n  const checkWinner = (squares) => {\n    const winningLines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [2, 5, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < winningLines.length; i++) {\n      const [a, b, c] = winningLines[i];\n\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[b] === squares[c]\n      ) {\n        return squares[a];\n      }\n    }\n    return null;\n  };\n  let GameStatus;\n  const winner = checkWinner(boardValues);\n\n  GameStatus = winner\n    ? `The winner is ${winner}`\n    : `Next is : ${xIsNext ? \"X\" : \"O\"}`;\n\n  return (\n    <div className={classes.GameContainer}>\n      <Button clickButton={restartGameHandler} buttonName=\"Start\" />\n      <p className={classes.text}> {GameStatus} </p>\n      <div className={classes.GameBoard}>\n        <div className={classes.row}>\n          {renderSquare(0)}\n          {renderSquare(1)}\n          {renderSquare(2)}\n        </div>\n        <div className={classes.row}>\n          {renderSquare(3)}\n          {renderSquare(4)}\n          {renderSquare(5)}\n        </div>\n        <div className={classes.row}>\n          {renderSquare(6)}\n          {renderSquare(7)}\n          {renderSquare(8)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}